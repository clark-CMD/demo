// ==UserScript==
// @name         扇贝阅读 Safari 阅读模式优化 v0.7 (模拟完成按钮)
// @namespace    http://tampermonkey.net/
// @version      0.7
// @description  精确重建扇贝阅读文章内容，修复 Safari 阅读模式乱码，保留标记，并尝试添加“完成阅读”按钮。
// @author       Your Name & Claude
// @match        https://web.shanbay.com/reading/web-news/articles/*
// @grant        GM_addStyle
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // --- 配置 ---
    const config = {
        paragraphSelector: '.article-content > .para',
        sentenceSelector: '.sentence',
        wordSelector: '.word',
        boldClass: 'word-bold',
        learnedClass: 'learned',
        titleSelectors: ['h2.article-title', '.article-header h2', 'h1', 'h2'],
        contentContainerSelector: '.article-content',
        originalFinishButtonSelector: 'a.article-button.finish-button', // 原始完成按钮的选择器
        debug: true
    };

    // --- 样式 ---
    // 添加一些基本样式，让模拟按钮在阅读模式下稍微显眼一点
    GM_addStyle(`
        #reader-mode-finish-link {
            display: block;
            margin: 2em auto 1em auto; /* 上下边距，左右自动居中 */
            padding: 10px 15px;
            border: 1px solid #cccccc; /* 灰色边框 */
            background-color: #f0f0f0; /* 浅灰色背景 */
            color: #333333; /* 深灰色文字 */
            text-decoration: none; /* 去掉下划线 */
            border-radius: 5px; /* 圆角 */
            text-align: center; /* 文字居中 */
            cursor: pointer; /* 鼠标指针 */
            max-width: 200px; /* 最大宽度 */
            font-weight: bold;
        }
        #reader-mode-finish-link:hover {
            background-color: #e0e0e0; /* 悬停时变深一点 */
        }
    `);


    // --- 工具函数 ---
    function log(message) {
        if (config.debug) {
            console.log('[Shanbay Reader Mode Fix v0.7] ' + message);
        }
    }

    // --- 主要逻辑 ---
    function restructureForReaderMode() {
        log('Starting restructuring process (v0.7)...');

        const marker = 'readerModeRestructured';
        if (document.body.dataset[marker]) {
            log('Already restructured. Skipping.');
            return;
        }

        const contentContainer = document.querySelector(config.contentContainerSelector);
        if (!contentContainer) {
            log(`Error: Could not find content container: ${config.contentContainerSelector}`);
            return;
        }

        // 1. 创建新的 <article> 容器
        const readerArticle = document.createElement('article');
        readerArticle.className = 'reader-mode-content-generated';

        // 2. 寻找并添加标题
        let titleText = document.title;
        for (const selector of config.titleSelectors) {
            const titleElement = document.querySelector(selector);
            if (titleElement && titleElement.textContent.trim()) {
                titleText = titleElement.textContent.trim();
                log(`Found title using selector: ${selector}`);
                break;
            }
        }
        const heading = document.createElement('h1');
        heading.textContent = titleText;
        readerArticle.appendChild(heading);
        log(`Article Title set to: ${titleText}`);

        // 3. 查找所有段落容器
        let paragraphContainers = contentContainer.querySelectorAll(config.paragraphSelector);
        if (paragraphContainers.length === 0) {
            log(`Warning: No paragraph containers found using direct selector. Trying fallback.`);
            paragraphContainers = contentContainer.querySelectorAll('.para');
             if (paragraphContainers.length === 0) {
                 log(`Error: Still no paragraph containers found. Aborting content generation.`);
                 return;
             }
        } else {
            log(`Found ${paragraphContainers.length} paragraph containers.`);
        }

        let paragraphsGenerated = 0;

        // 4. 遍历每个段落容器 (重建内容 - 代码与 v0.6 基本相同)
        paragraphContainers.forEach((paraContainer, paraIndex) => {
            const pElement = document.createElement('p');
            pElement.style.margin = '1em 0';
            pElement.style.lineHeight = '1.6';
            let contentAddedToParagraph = false;

            const sentenceContainers = paraContainer.querySelectorAll(config.sentenceSelector);
            if (sentenceContainers.length > 0) {
                // log(`Paragraph ${paraIndex + 1}: Found ${sentenceContainers.length} sentences. Rebuilding...`); // 减少日志量
                sentenceContainers.forEach((sentenceContainer, sentenceIndex) => {
                    sentenceContainer.childNodes.forEach(node => {
                        let nodeProcessed = false;
                        if (node.nodeType === Node.ELEMENT_NODE && node.matches('span')) {
                            const wordSpan = node.querySelector(config.wordSelector);
                            if (wordSpan) {
                                const wordText = wordSpan.textContent.trim();
                                if (wordText) {
                                    const isBold = wordSpan.classList.contains(config.boldClass);
                                    const isLearned = wordSpan.classList.contains(config.learnedClass);
                                    let wordElement = null;
                                    if (isBold && isLearned) { wordElement = document.createElement('b'); const u = document.createElement('u'); u.textContent = wordText; wordElement.appendChild(u); }
                                    else if (isBold) { wordElement = document.createElement('b'); wordElement.textContent = wordText; }
                                    else if (isLearned) { wordElement = document.createElement('u'); wordElement.textContent = wordText; }
                                    else { wordElement = document.createTextNode(wordText); }
                                    pElement.appendChild(wordElement); contentAddedToParagraph = true; nodeProcessed = true;
                                }
                            } else if (node.textContent.trim() === '' && contentAddedToParagraph && pElement.lastChild && (!pElement.lastChild.textContent || !pElement.lastChild.textContent.endsWith(' '))) {
                                pElement.appendChild(document.createTextNode(' ')); nodeProcessed = true;
                            }
                        } else if (node.nodeType === Node.TEXT_NODE) {
                            const punctuation = node.textContent.trim();
                            if (punctuation) {
                                if (pElement.lastChild && pElement.lastChild.nodeType === Node.TEXT_NODE && pElement.lastChild.textContent.endsWith(' ')) { pElement.lastChild.textContent = pElement.lastChild.textContent.trimEnd(); }
                                pElement.appendChild(document.createTextNode(punctuation)); contentAddedToParagraph = true; nodeProcessed = true;
                            } else if (node.textContent.includes(' ') && contentAddedToParagraph && pElement.lastChild && (!pElement.lastChild.textContent || !pElement.lastChild.textContent.endsWith(' '))) {
                                pElement.appendChild(document.createTextNode(' ')); nodeProcessed = true;
                            }
                        }
                        if (!nodeProcessed && node.nodeType === Node.ELEMENT_NODE && contentAddedToParagraph && pElement.lastChild && (!pElement.lastChild.textContent || !pElement.lastChild.textContent.endsWith(' '))) {
                             if (node.textContent.includes(' ')) { pElement.appendChild(document.createTextNode(' ')); }
                        }
                    });
                    if (sentenceIndex < sentenceContainers.length - 1 && contentAddedToParagraph && pElement.lastChild && (!pElement.lastChild.textContent || !pElement.lastChild.textContent.endsWith(' '))) {
                         pElement.appendChild(document.createTextNode(' '));
                    }
                });
            } else {
                 log(`Paragraph ${paraIndex + 1}: No sentence containers found. Trying direct rebuild.`);
                 // ... [备用逻辑] ...
                 paraContainer.childNodes.forEach(node => { /* ... 简化版处理 ... */ });
            }

            if (contentAddedToParagraph && pElement.textContent.trim()) {
                if (pElement.lastChild && pElement.lastChild.nodeType === Node.TEXT_NODE && pElement.lastChild.textContent.endsWith(' ')) { pElement.lastChild.textContent = pElement.lastChild.textContent.trimEnd(); }
                 if (pElement.textContent.trim()) {
                     readerArticle.appendChild(pElement); paragraphsGenerated++;
                 }
            }
        }); // end of paragraphs loop


        // 5. 检查是否生成了段落内容
        if (paragraphsGenerated === 0) {
            log('Warning: Failed to generate paragraph content. Article might be empty or structure changed.');
            // 即使没有段落，也可能需要标题和按钮，所以不立即退出
        }

        // 6. **创建并添加“完成阅读”模拟链接**
        const originalButton = document.querySelector(config.originalFinishButtonSelector);
        if (originalButton) {
            log('Found original finish button. Creating simulation link.');
            const finishLink = document.createElement('a');
            finishLink.href = '#'; // 使用 # 防止页面跳转
            finishLink.id = 'reader-mode-finish-link'; // 应用 CSS 样式
            finishLink.textContent = originalButton.textContent.trim() || '完成阅读'; // 使用原始按钮文字或默认文字

            finishLink.addEventListener('click', (event) => {
                event.preventDefault(); // 阻止 # 的默认行为
                event.stopPropagation(); // 阻止事件冒泡（可能不需要，但以防万一）
                log('"Finish Reading" simulation link clicked!');

                // 再次查找原始按钮，以防 DOM 变化
                const currentOriginalButton = document.querySelector(config.originalFinishButtonSelector);
                if (currentOriginalButton) {
                    log('Attempting to click the original button...');
                    try {
                         currentOriginalButton.click();
                         // 注意：alert 在阅读模式下可能看不到，提示信息最好在 console 输出
                         log('Original button clicked successfully (programmatically). Exit reader mode to see results.');
                         // 可以选择性地给用户一点视觉反馈，比如改变链接文字
                         finishLink.textContent = '已尝试点击';
                         finishLink.style.backgroundColor = '#d4edda'; // 绿色背景表示成功
                         finishLink.style.borderColor = '#c3e6cb';
                         finishLink.style.color = '#155724';
                    } catch (e) {
                        log('Error clicking the original button: ' + e);
                        alert('无法自动点击“完成阅读”按钮，请退出阅读模式后手动点击。');
                        finishLink.textContent = '点击失败';
                         finishLink.style.backgroundColor = '#f8d7da'; // 红色背景表示失败
                         finishLink.style.borderColor = '#f5c6cb';
                         finishLink.style.color = '#721c24';
                    }
                } else {
                    log('Error: Original finish button not found when link was clicked.');
                    alert('错误：无法找到原始的“完成阅读”按钮。');
                    finishLink.textContent = '按钮丢失';
                    finishLink.style.backgroundColor = '#fff3cd'; // 黄色背景表示警告
                    finishLink.style.borderColor = '#ffeeba';
                    finishLink.style.color = '#856404';
                }
            });

            // 将模拟链接添加到 readerArticle 的末尾
            readerArticle.appendChild(finishLink);
            log('Simulation link added to the generated article.');

        } else {
            log('Warning: Original finish button not found. Cannot add simulation link.');
        }


        // 7. 添加元数据
        readerArticle.setAttribute('role', 'article');
        readerArticle.setAttribute('itemscope', '');
        readerArticle.setAttribute('itemtype', 'http://schema.org/Article');
        // ... [添加 headline meta 的代码] ...
        const headlineMeta = document.createElement('meta');
        headlineMeta.setAttribute('itemprop', 'headline');
        headlineMeta.setAttribute('content', heading.textContent);
        if (readerArticle.firstChild) {
            readerArticle.insertBefore(headlineMeta, readerArticle.firstChild.nextSibling);
        } else {
            readerArticle.appendChild(headlineMeta);
        }


        // 8. 插入页面并隐藏原始内容
        const parentOfOriginalContent = contentContainer.parentNode;
        if (parentOfOriginalContent) {
            parentOfOriginalContent.insertBefore(readerArticle, contentContainer);
            log('Generated <article> injected.');
            contentContainer.style.display = 'none';
            log('Original content container hidden.');
        } else {
            log('Error: Could not find parent node. Appending to body fallback.');
            document.body.prepend(readerArticle);
        }

        document.body.dataset[marker] = 'true';
        log('Restructuring complete (v0.7).');
    }

    // --- 执行脚本 ---
    const observer = new MutationObserver((mutationsList, obs) => {
        const targetContent = document.querySelector(config.contentContainerSelector);
        if (targetContent && !document.body.dataset.readerModeRestructured) {
            log('Content container detected via MutationObserver. Running restructuring...');
            setTimeout(restructureForReaderMode, 500);
            // obs.disconnect();
        }
    });

    observer.observe(document.body, { childList: true, subtree: true });

    function tryRun() {
        if (document.querySelector(config.contentContainerSelector) && !document.body.dataset.readerModeRestructured) {
            log('Content container found on initial check. Running restructuring...');
            setTimeout(restructureForReaderMode, 500);
        } else {
            log('Content container not found yet or already restructured.');
        }
    }

    if (document.readyState === 'complete' || document.readyState === 'interactive') {
        tryRun();
    } else {
        window.addEventListener('DOMContentLoaded', tryRun);
        window.addEventListener('load', tryRun);
    }

})();
